This is the beginning into the bash command line, I tried possible complilations and am using the vi Editors through git bash to write this in...After which I will push to my gitHub page and get a good hands on versioninig... Let's goðŸ˜Ž:

BEGINNIING

-> Echo/echo: This is used to print something in the command prompt or Kernel whichever name you choose to call it.

-> whoami: This one allows you to be able to tell the users of the computer, if its in default, it returns the computer name and if otherwise it returns the username.

-> uname: This is like asking the computer to prints it name, basically this works well by asking the computer what is OS is running on the computer. Can also accept flags e.g uname -a, it will reveal the hidden parts.

-> ~: This is used to depict a home directory.

-> -- / -: This is flagging and it used to pass a particular command to a specific keyword under the command.

-> pwd: This is used to print the current working directory, i.e it shows the folder you are at the moment working on.

-> cd: This is used to change from folder to folder and can be multidirected using the key "/" e.g cd documents/myfileName/to_whatever_part_you_are_going

-> mkdir: This is used to create a folder in it can also multi create folders using the key "/" e.g mkdir myprojects/project1/phase1/to_whatever_amount_of_folders_to_create.

-> Still on echo, you can redirect where you want the echo message to be printed on using >> and anything that comes after automatically becomes a file filetype, and becomes the name e.g echo My name is GbadamsonSon >> Gbadamson, and you can extend its content by adding some text without altering the name assigned to the name given initially in this case Gbadamson

-> ls: used to list out the items inside a particular directory, can accept flags to alter the functionalities.

-> cat: This is used to read the content of any files and folders that have readable items.

*NB*: Anything that starts with a "." notation cannot be seen physically, unless the containing directory has been flagged to reveal everything. Sigil ">>" is similar to the pipe "|" in terms of function but not in all cases. 

-> history: this will reveal the list of everything that has been typed.

-> grep: This is used to search for a particular keyword in the bash. Can be used in different instance, directly and indirectly e.g of direct use is: grep echo and indirect usage for instance is history | grep echo

-> curl: This helps us connect to the internet directly from the kernel and can also accept flags. e.g curl -L https://google.com
[curl -L solarpunk.cool/magic/end | grep "~~*" -A2 | tail -2 >> end, curl -L solarpunk.cool/magic/end | grep "~~*" -A2 | tail -2 >> end] these are some practical case of the curl

->
